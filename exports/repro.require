#!/bin/bash

arguments=( "$@" )

module_name=$1
module_version=$2
module_url_template=$3

module_url=`eval echo ${module_url_template}`

function set_mode_bits {
    artifact=$1
    mimetype=`file --mime ${artifact}`
    if echo ${mimetype} | grep -q "application/x-executable"; then
        chmod u+x ${artifact}
    elif echo ${mimetype} | grep -q "text/x-shellscript"; then
        chmod u+x ${artifact}
    elif echo ${mimetype} | grep -q "text/x-python"; then
        chmod u+x ${artifact}
    fi
}

function install_profile {

    local profile=$1
    local module_install_dir=$2

    cd ${module_install_dir}

    profile_manifest_file="${profile}-manifest"

    if [[ -f ${profile_manifest_file} ]] ; then
        echo "The ${profile} profile for the ${module_name} module already has been installed."
    else

        if [[ $module_version == exports ]] ; then

            export_snapshot_dir="${REPRO_ROOT_DIR}/${module_name}-exports"

            if [[ -d ${REPRO_ROOT_DIR}/exports ]] ; then
                sudo mv /${REPRO_ROOT_DIR}/exports ${export_snapshot_dir}
            fi

            exports_manifest_file=${export_snapshot_dir}/${profile_manifest_file}
            if [[ -f ${exports_manifest_file} ]] ; then
                echo "------Copying local manifest file from ${exports_manifest_file} to $(pwd)------"
                cp ${export_snapshot_dir}/${profile_manifest_file} .
            else
                echo "------No local manifest file found at ${exports_manifest_file}------"
                return
            fi
        else
            remote_manifest_file=${module_url}/${profile_manifest_file}
            curl -f -L ${remote_manifest_file} -o ${profile_manifest_file}
            if [[ $? -ne 0 ]] ; then
                echo "------No remote manifest file found at ${remote_manifest_file}------"
                return
            fi
        fi

        readarray lines < ${profile_manifest_file}

        for full_line in "${lines[@]}" ; do
            # trim comments starting with a `#` character on the line
            trimmed_line=${full_line%%#*}

            # split the trimmed line using whitespace as token delimiter
            read -ra tokens <<< ${trimmed_line}

            # interpret the line based on the number its tokens
            case ${#tokens[@]} in

            1)  artifact_name=${tokens[0]}
                artifact_path=${artifact_name}
                artifact_base=$(basename $artifact_path)
            ;;

            2)  artifact_name=${tokens[0]}
                artifact_path=${tokens[1]}
                artifact_base=$(basename $artifact_path)
            ;;

            3)  artifact_name=${tokens[0]}
                artifact_path=${tokens[1]}
                artifact_base=${tokens[2]}
            ;;

            *) continue
            ;;

            esac


            if [[ ${artifact_path} == http?:* ]] ; then
                curl -f -L ${artifact_path} -o ${artifact_base}
            elif [[ $module_version == exports ]] ; then
                cp ${export_snapshot_dir}/${artifact_path} ${artifact_base}
            else
                curl -f -L ${module_url}/${artifact_path} -o ${artifact_base}  || \
                curl -f -L ${module_url}/${artifact_base} -o ${artifact_base}
            fi

            if [[ ${artifact_name} != ${artifact_base} ]] ; then
                ln -s ${artifact_base} ${artifact_name}
            fi

            set_mode_bits ${artifact_base}

        done

        profile_setup_file=${profile}-setup
        if [[ -f "${profile_setup_file}" ]] ; then
            echo "Running ${profile_setup_file}"
            source ${profile_setup_file} ${module_install_dir}
        fi

        echo "################## Working directory: $(pwd) ####################################"
        echo "################## Adding ${profile} to installed-profiles ######################"
        printf "%s\n" ${profile} >> ${module_install_dir}/installed-profiles
    fi
}

# determine path to index entry for this module
repro_index_entry=${REPRO_INDEX_DIR}/${module_name}

echo "Installing REPRO module ${module_name} version ${module_version}..."

module_install_dir=${REPRO_MODULES_DIR}/${module_name}-${module_version}

# if the module is already in the index check that the versions are compatible
if [[ -f ${repro_index_entry} ]] ; then
    read -ra tokens < ${repro_index_entry}
    installed_version=${tokens[1]}
    if [[ ${module_version} != ${installed_version} ]] ; then
        echo "Requested version '${module_version}' of module '${module_name}' does not match installed version '${installed_version}'."
        exit 1
    fi
else
    # otherwise index the new module and create directory and link
    echo "${module_name} ${module_version} ${module_install_dir}" > ${repro_index_entry}
    echo "${module_name}" >> ${REPRO_ORDER_FILE}
    mkdir -p ${module_install_dir}
    cd ${REPRO_MODULES_DIR}
    ln -s ${module_name}-${module_version} ${module_name}
fi

# always process the base and trim profiles
mandatory_profiles=( base trim )
for profile in "${mandatory_profiles[@]}" ; do
    install_profile ${profile} ${module_install_dir}
done

# process optional standard profiles specified in the script options
optional_profiles=( demo code util )
for profile in "${optional_profiles[@]}" ; do
    if [[ ${arguments[*]} =~ "--$profile" ]] ; then
        install_profile ${profile} ${module_install_dir}
    fi
done

# process optional custom profiles specified in the script options
standard_profiles=( "${mandatory_profiles[@]}" "${optional_profiles[@]}" )
for i in "${!arguments[@]}"; do
    if [[ "${arguments[i]}" =~ -[-]?([a-zA-Z0-9_.-]+) ]] ; then
    profile="${BASH_REMATCH[1]}"
        if [[ ! ${standard_profiles[*]} =~ "$profile" ]] ; then
            echo "################## Module install directory: ${module_install_dir} ####################################"
            install_profile ${profile} ${module_install_dir}
        fi
    fi
done

