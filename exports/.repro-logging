# ensure this file is sourced only once
if [[ "$REPRO_LOGGING_FILE_SOURCED" == true ]] ; then
    $_REPRO_TRACE_SOURCE_
	$_REPRO_DEBUG_TRACE_RETURN_ 'Already loaded logging functions' ; return
else
    REPRO_LOGGING_FILE_SOURCED=true
fi

function repro.alert {
    if [[ ${REPRO_LOGGING_LEVEL} != 'none' ]] ; then
        _repro.log A MESG $*
    fi
}

function repro.error {
    if [[ ${REPRO_LOGGING_LEVEL} != 'none' ]] ; then
        _repro.log E MESG $*
    fi
}

function repro.warn {
    if [[ ${REPRO_LOGGING_LEVEL} != 'none'  && \
          ${REPRO_LOGGING_LEVEL} != 'alert' ]] ; then
        _repro.log W MESG $*
    fi
}

function repro.info {
    if [[ ${REPRO_LOGGING_LEVEL} == 'info'  || \
          ${REPRO_LOGGING_LEVEL} == 'debug' || \
          ${REPRO_LOGGING_LEVEL} == 'trace' ]] ; then
        _repro.log I MESG $*
    fi
}

function repro.debug {
    if [[ ${REPRO_LOGGING_LEVEL} == 'debug' || \
          ${REPRO_LOGGING_LEVEL} == 'trace' ]] ; then
        _repro.log D MESG $*
    fi
}

function repro.debug_eval {
    if [[ ${REPRO_LOGGING_LEVEL} == 'debug' || \
          ${REPRO_LOGGING_LEVEL} == 'trace' ]] ; then
        _repro.log D EVAL $*
    fi
    eval $*
}

function repro.trace {
    if [[ ${REPRO_LOGGING_LEVEL} == 'trace' ]] ; then
        _repro.log T MESG $*
    fi
}

function repro.trace_source {
    if [[ ${REPRO_LOGGING_LEVEL} == 'trace' ]] ; then
        if [[ -n $1 ]] ; then
            REPRO_TRACE_SOURCE=$1
        else
            _repro.log T SRCE "${REPRO_TRACE_SOURCE} -> $(_repro.caller_file 0)"
            unset REPRO_TRACE_SOURCE
        fi
    fi
}

function repro.trace_call {
    if [[ ${REPRO_LOGGING_LEVEL} == 'trace' ]] ; then
        arguments=" $(echo $* | xargs)"
        printf -v location "[%s -> %s]" "$(_repro.caller 1)" "$(_repro.caller 0)"
        printf -v message "%s -> %s%s" "$(_repro.caller_func 1)" "$(_repro.caller_func 0)" "${arguments}"
        _repro.log T CALL --location "$location" $message
    fi
}

function repro.trace_ret {

	if [[ $1 == --stack-level ]] ; then
        callee_stack_level=$2
        ((caller_stack_level=$callee_stack_level - 1))
        shift 2
	else
		callee_stack_level=1
        caller_stack_level=0
    fi

    if [[ ! -z "$*" ]] ; then
    	repro.trace --stack-level 2 $*
    fi

    if [[ ${REPRO_LOGGING_LEVEL} == 'trace' ]] ; then
        printf -v location "[%s <- %s]" "$(_repro.caller ${callee_stack_level})" "$(_repro.caller ${caller_stack_level})"
        printf -v message "%s <- %s" "$(_repro.caller_func ${callee_stack_level})" "$(_repro.caller_func ${caller_stack_level})"
        _repro.log T RETN --location "$location" $message
    fi
}

function repro.info_trace_ret {
	repro.info --stack-level 2 $*
	repro.trace_ret --stack-level 2
}


function repro.debug_trace_ret {
	repro.debug --stack-level 2 $*
	repro.trace_ret --stack-level 2
}


# returns seconds since the epoch
function _repro.timestamp_seconds {
    echo $(date +"%s")
}

#  returns a sortable timestamp
function _repro.timestamp {
    echo "$(date +'%Y-%m-%d %T.%3N')"
}

# returns a sortable timestamp with no spaces
function _repro.timestamp_nospaces {
    echo "$(date +'%Y%m%d.%H%M%S.%3N')"
}

function _repro.caller_file {
	stack_level=$1
	read _ _ file  <<< "$(caller $(($stack_level+1)))"
	echo $file
}

function _repro.caller_func {
	stack_level=$1
	read _ func _  <<< "$(caller $(($stack_level+1)))"
	echo $func
}

function _repro.caller {
	stack_level=$1
	read line func file  <<< "$(caller $(($stack_level+1)))"
	printf "%s:%s:%s\n" "$file" "$func" "$line"
}

function _repro.create_log_dir {
    export REPRO_LOG_DIR=${REPRO_MNT}/.repro-log
    if [[ ! -d ${REPRO_LOG_DIR} ]] ; then
        mkdir ${REPRO_LOG_DIR}
        echo "*" > ${REPRO_LOG_DIR}/.gitignore
    fi
}

function _repro.create_log_file {

    _repro.create_log_dir

    if [[ ${REPRO_LOGGING_FILENAME} == auto ]] ; then
        export REPRO_RUN_LOG_FILE="${REPRO_LOG_DIR}/$(_repro.timestamp_nospaces)-run.log"
    else
        export REPRO_RUN_LOG_FILE="${REPRO_LOG_DIR}/${REPRO_LOGGING_FILENAME}"
    fi

    if [[ ${REPRO_LOGGING_APPEND} ]] ; then
        touch ${REPRO_RUN_LOG_FILE}
    else
        truncate --size 0 ${REPRO_RUN_LOG_FILE}
    fi
}

function _repro.log {

    level="$1"  # first argument indicates the logging level of the entry
    type="$2"   # second argument indicates the type of the entry body
    shift 2

    # support an --location option overriding the default source location
    location=''
    if [[ "$1" == "--location" ]] ; then
        if [[ ${REPRO_LOGGING_LOCATIONS} == enabled ]] ; then
            location=" $2"
        fi
        shift 2
    fi

	if [[ $1 == --stack-level ]] ; then
        stack_level=$2
        shift 2
	else
		stack_level=1
    fi

	if [[ ${location} == '' && ${REPRO_LOGGING_LOCATIONS} == enabled ]] ; then
		printf -v location " [%s]" "$(_repro.caller ${stack_level})"
	fi

    arguments="$*"

	if [[ ${REPRO_LOGGING_TIMESTAMPS} == enabled ]] ; then
        timestamp="$(_repro.timestamp_nospaces) "
	else
	    timestamp=''
    fi

    printf -v entry "%s%s %s %s%s" "$timestamp" "$level" "$type" "$arguments" "$location"

    if [[ ${REPRO_LOG_TO_TERMINAL} == enabled ]] ; then
        echo "$entry" >&2
    fi

    if [[ ${REPRO_LOG_TO_FILE} == enabled ]] ; then
        echo "$entry" >> ${REPRO_RUN_LOG_FILE}
    fi
}

function _repro.initialize_logging {

    # if logging is disabled set logging macros to do nothing
    if [[ ${REPRO_LOGGING_LEVEL} == 'none' ]] ; then
        export _REPRO_ALERT_=:
        export _REPRO_ERROR_=:
        export _REPRO_WARN_=:
        export _REPRO_INFO_=:
        export _REPRO_DEBUG_=:
        export _REPRO_DEBUG_EVAL_='eval $*'
        export _REPRO_TRACE_=:
        export _REPRO_TRACE_CALL_=:
        export _REPRO_TRACE_SOURCE_=:
        export _REPRO_TRACE_RETURN_='return ; '
        export _REPRO_INFO_TRACE_RETURN_='return ; '
        export _REPRO_DEBUG_TRACE_RETURN_='return ; '
        return
    fi

    if [[ $REPRO_LOGGING_OPTIONS != *"NO_TIMESTAMPS"* ]] ; then
        REPRO_LOGGING_TIMESTAMPS=enabled
    fi

    if [[ $REPRO_LOGGING_OPTIONS != *"NO_LOCATIONS"* ]] ; then
        REPRO_LOGGING_LOCATIONS=enabled
    fi

    if [[ $REPRO_LOGGING_OPTIONS != *"NO_FILE"* ]] ; then
        REPRO_LOG_TO_FILE=enabled
        _repro.create_log_file
    fi

    if [[ $REPRO_LOGGING_OPTIONS != *"NO_TERMINAL"* ]] ; then
        REPRO_LOG_TO_TERMINAL=enabled
    fi

    if [[ $REPRO_LOGGING_OPTIONS != *"NO_APPEND"* ]] ; then
        REPRO_LOGGING_APPEND=true
    fi


    # define logging macros
    export _REPRO_ALERT_=repro.alert
    export _REPRO_ERROR_=repro.error
    export _REPRO_WARN_=repro.warn
    export _REPRO_INFO_=repro.info
    export _REPRO_DEBUG_=repro.debug
    export _REPRO_DEBUG_EVAL_=repro.debug_eval
    export _REPRO_TRACE_=repro.trace
    export _REPRO_TRACE_CALL_=repro.trace_call
    export _REPRO_TRACE_SOURCE_=repro.trace_source
    export _REPRO_TRACE_RETURN_=repro.trace_ret
    export _REPRO_INFO_TRACE_RETURN_=repro.info_trace_ret
    export _REPRO_DEBUG_TRACE_RETURN_=repro.debug_trace_ret

	# send Make output to terminal if logging at debug or trace levels
	if [[ ${REPRO_LOGGING_LEVEL} == 'debug' || \
		${REPRO_LOGGING_LEVEL} == 'trace' ]] ; then
		export REPRO_MAKE_VERBOSITY=''
	else
		export REPRO_MAKE_VERBOSITY=--quiet
    fi
}

# initialize logger state
_repro.initialize_logging

# report definition of logging functions succeeeded
$_REPRO_TRACE_SOURCE_
$_REPRO_DEBUG_TRACE_RETURN_ 'Loaded logging functions'
