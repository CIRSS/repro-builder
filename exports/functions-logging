
# returns seconds since the epoch
function repro.timestamp_seconds {
    echo $(date +"%s")
}

# returns a time-sortable dated timestamp
function repro.timestamp {
    echo "$(date +'%Y-%m-%d %T') "
}

function _log_prefix {
    if [[ ${REPRO_TIMESTAMPS} == "true" ]] ; then
        repro.timestamp
    else
        echo 'REPRO.'
    fi
}

function repro.alert {
    if [[ ${REPRO_VERBOSITY} != 'silent' ]] ; then
        echo $(_log_prefix)'ALERT MSG' $*
    fi
}

function repro.error {
    if [[ ${REPRO_VERBOSITY} != 'silent' ]] ; then
        printf "%sERROR MSG %s [%s]\n" "$(_log_prefix)" "$*" "$(_caller 0)"
    fi
}

function repro.info {
    if [[ ${REPRO_VERBOSITY} == 'info'  || \
          ${REPRO_VERBOSITY} == 'debug' || \
          ${REPRO_VERBOSITY} == 'trace' ]] ; then
        echo $(_log_prefix)'INFO  MSG' $*
    fi
}

function repro.debug {
    if [[ ${REPRO_VERBOSITY} == 'debug' || \
          ${REPRO_VERBOSITY} == 'trace' ]] ; then
        printf "%sDEBUG MSG %s [%s]\n" "$(_log_prefix)" "$*" "$(_caller 0)"
    fi
}

function _caller_func {
	stack_level=$1
	read _ func _  <<< "$(caller $(($stack_level+1)))"
	echo $func
}

function _caller {
	stack_level=$1
	read line func file  <<< "$(caller $(($stack_level+1)))"
	printf "%s:%s:%s\n" "$file" "$func" "$line"
}

function repro.trace_call {
    if [[ ${REPRO_VERBOSITY} == 'trace' ]] ; then
        arguments=" $(echo $* | xargs)"
        printf "%sTRACE CAL %s -> %s%s [%s -> %s]\n" "$(_log_prefix)" "$(_caller_func 1)" "$(_caller_func 0)" "${arguments}" "$(_caller 1)" "$(_caller 0)"
    fi
}

function repro.trace_ret {
    if [[ ${REPRO_VERBOSITY} == 'trace' ]] ; then
    	printf "%sTRACE RET %s <- %s [%s <- %s]\n" "$(_log_prefix)" "$(_caller_func 1)" "$(_caller_func 0)" "$(_caller 1)" "$(_caller 0)"
    fi
}

_TRACE_CALL_="repro.trace_call"
_TRACE_RETURN_="repro.trace_ret ; return"
