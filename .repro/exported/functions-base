function repro.get_prefix_paths {
    unset prefix_paths
    readarray paths < ${REPRO_PATHS_FILE}
    for path_line in "${paths[@]}" ; do
        new_path=$(echo "$path_line" | envsubst | xargs )
        if [[ -vprefix_paths ]] ; then
           prefix_paths=${new_path}:${prefix_paths}
        else
           prefix_paths=${new_path}
        fi
    done
    echo ${prefix_paths}
}

function repro.install_dir_for_module {
    module_name=$1
    read -ra tokens < ${REPRO_INDEX_DIR}/${module_name}
    module_install_dir=${tokens[2]}
    echo ${module_install_dir}
}

function repro.get_module_paths {
    unset module_paths
    readarray modules < ${REPRO_ORDER_FILE}
    for module_name in "${modules[@]}" ; do
        module_install_dir=$(repro.install_dir_for_module ${module_name})
        if [[ -v module_paths ]] ; then
            module_paths=${module_install_dir}:${module_paths}
        else
            module_paths=${module_install_dir}
        fi
    done
    echo ${module_paths}
}

function repro.update_path {
        
    updated_path=${REPRO_BASE_PATH}
    
    module_paths=$(repro.get_module_paths)
    if [[ ! -z ${module_paths} ]] ; then
        updated_path=${module_paths}:${updated_path}
    fi
    
   prefix_paths=$(repro.get_prefix_paths)
    if [[ ! -z ${prefix_paths} ]] ; then
        updated_path=${prefix_paths}:${updated_path}
    fi
    
    export PATH=${updated_path}
}

function repro.state_dir_for_module {
    module_name=$1
    state_dir=${REPRO_MNT}/.${module_name}
    echo ${state_dir}
}

function repro.initialize_module_state {
    
    module_name=$1

    # state directory is under the REPRO mount point
    state_dir=$(repro.state_dir_for_module ${module_name})
    install_dir=$(repro.install_dir_for_module ${module_name})

    # create state directory if it does not exist
    [[ -d ${state_dir} ]] || mkdir -p ${state_dir}

    # include the default .gitignore if it does not exist
    git_ignore_file=${state_dir}/.gitignore
    [[ -f ${git_ignore_file} ]] || echo "*" > ${git_ignore_file}

    # copy module files listed in state manifest if present
    state_manifest=${install_dir}/manifest-state.txt
    if [[ -f ${state_manifest} ]] ; then
        readarray state_manifest_lines < ${state_manifest}
        for state_file_line in "${state_manifest_lines[@]}" ; do
            state_file=$(echo ${state_file_line%%#*} | xargs)
            if [[ -n ${state_file} ]] ; then 
                cp --no-clobber ${install_dir}/${state_file} ${state_dir}/${state_file}
            fi
        done
    fi
}

function repro.initialize_modules {
    readarray modules < ${REPRO_ORDER_FILE}
    for module in "${modules[@]}" ; do
        repro.initialize_module_state ${module}
    done
}

function repro.update_targets {
    
    # do nothing if targets file already exists
    if [[ -f ${REPRO_TARGETS_FILE} ]] ; then
        return
    else 
        repro_builder_install_dir=$(repro.install_dir_for_module repro-builder)
        cp  ${repro_builder_install_dir}/${REPRO_TARGETS_FILENAME} ${REPRO_TARGETS_FILE}
    fi

    readarray modules < ${REPRO_ORDER_FILE}
    for modules_line in "${modules[@]}" ; do
        module_name=$(echo $modules_line | xargs)
        install_dir=$(repro.install_dir_for_module ${module_name})

        for profile in base state demo dev test; do 
            module_targets_file=${install_dir}/targets-${profile}.txt
            if [[ -f ${module_targets_file} ]] ; then 
                repro_targets=''
                readarray module_targets < ${module_targets_file}
                for target_entry in "${module_targets[@]}" ; do
                    read -ra tokens <<< ${target_entry}
                    repro_target=${tokens[0]}
                    module_target=${tokens[1]}
                    printf '%s %s.%s\n' ${repro_target} ${module_name} ${module_target} >> ${REPRO_TARGETS_FILE}
                done
            fi
        done
    done
}

function repro.run_target {

    requested_target=$1
    echo "Running target $requested_target"

    [[ ! -f ${REPRO_TARGETS_FILE} ]] && return

    readarray targets_file_lines < ${REPRO_TARGETS_FILE}

    for target_entry in "${targets_file_lines[@]}" ; do
        read -ra tokens <<< ${target_entry}
        if [[ ${tokens[0]} == ${requested_target}: ]] ; then
            IFS='.' read module_name module_target <<< ${tokens[1]}
            make -C ${REPRO_MNT}/.${module_name} ${module_target}
            return
        fi
    done

    echo "Target $requested_target not found"
}
