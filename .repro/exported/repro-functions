function repro.get_prefix_paths {
    unset prefix_paths
    readarray paths < ${REPRO_PATHS_FILE}
    for path_line in "${paths[@]}" ; do
        new_path=$(echo "$path_line" | envsubst | xargs )
        if [[ -vprefix_paths ]] ; then
           prefix_paths=${new_path}:${prefix_paths}
        else
           prefix_paths=${new_path}
        fi
    done
    echo ${prefix_paths}
}

function repro.installation_dir_for_module {
    module_name=$1
    read -ra tokens < ${REPRO_INDEX_DIR}/${module_name}
    module_install_dir=${tokens[2]}
    echo ${module_install_dir}
}

function repro.get_module_paths {
    unset module_paths
    readarray modules < ${REPRO_ORDER_FILE}
    for module_name in "${modules[@]}" ; do
        module_install_dir=$(repro.installation_dir_for_module ${module_name})
        if [[ -v module_paths ]] ; then
            module_paths=${module_install_dir}:${module_paths}
        else
            module_paths=${module_install_dir}
        fi
    done
    echo ${module_paths}
}

function repro.update_path {
        
    updated_path=${REPRO_BASE_PATH}
    
    module_paths=$(repro.get_module_paths)
    if [[ ! -z ${module_paths} ]] ; then
        updated_path=${module_paths}:${updated_path}
    fi
    
   prefix_paths=$(repro.get_prefix_paths)
    if [[ ! -z ${prefix_paths} ]] ; then
        updated_path=${prefix_paths}:${updated_path}
    fi
    
    export PATH=${updated_path}
}

function repro.state_dir_for_module {
    module_name=$1
    state_directory=${REPRO_MNT}/.${module_name}
    echo ${state_directory}
}

function repro.initialize_module_state {
    
    module_name=$1

    # state directory is under the REPRO mount point
    state_directory=$(repro.state_dir_for_module ${module_name})

    # create state directory if it does not exist
    [[ -d ${state_directory} ]] || mkdir -p ${state_directory}

    # include the default .gitignore if it does not exist
    git_ignore_file=${state_directory}/.gitignore
    [[ -f ${git_ignore_file} ]] || echo "*" > ${git_ignore_file}
}

function repro.initialize_modules {
    readarray modules < ${REPRO_ORDER_FILE}
    for module in "${modules[@]}" ; do
        repro.initialize_module_state ${module}
    done
}

