#!/bin/bash

arguments=( "$@" )

echo "---------ARGUMENTS=${arguments[*]}------------"

module_name=$1
module_version=$2
module_url_template=$3

module_url=`eval echo ${module_url_template}`

function process_manifest {

    REPRO_EXPORTED_SNAPSHOT=$(cat ${REPRO_LAST_EXPORTED_DIR})

    profile=$1
    profile_manifest_file="manifest-${profile}.txt"

    echo "------Processing ${profile} profile ----------"

     if [[ $module_version == exported ]] ; then
        exported_manifest_file=${REPRO_EXPORTED_SNAPSHOT}/${profile_manifest_file}
        if [[ -f ${exported_manifest_file} ]] ; then
            echo "------Copying local manifest file from ${exported_manifest_file}------"
            cp ${REPRO_EXPORTED_SNAPSHOT}/${profile_manifest_file} . 
        else 
            echo "------No local manifest file found at ${exported_manifest_file}------"
            return
        fi
    else
        remote_manifest_file=${module_url}/${profile_manifest_file}
        wget -O ${profile_manifest_file} -nv ${remote_manifest_file}
        if [[ $? -ne 0 ]] ; then
            echo "------No remote manifest file found at ${remote_manifest_file}------"
            return
        fi 
    fi

    echo "------Processing contents of manifest file ${profile_manifest_file}------"

    readarray lines < ${profile_manifest_file}

    for full_line in "${lines[@]}"
    do
        # trim comments starting with a `#` character on the line
        trimmed_line=${full_line%%#*}

        # split the trimmed line using whitespace as token delimiter
        read -ra tokens <<< ${trimmed_line}

        # interpret the line based on the number its tokens
        case ${#tokens[@]} in

        1)  artifact_name=${tokens[0]}
            artifact_path=${artifact_name}
        ;;

        2)  artifact_name=${tokens[0]}
            artifact_path=${tokens[1]}
        ;;

        *) continue
        ;;

        esac

        artifact_base=$(basename $artifact_path)

        if [[ ${artifact_path} == http?:* ]] ; then
            wget -nv -O ${artifact_base} ${artifact_path}
        elif [[ $module_version == exported ]] ; then
            cp ${REPRO_EXPORTED_SNAPSHOT}/${artifact_path} ${artifact_base}
        else
            wget -nv -O ${artifact_base} ${module_url}/${artifact_path} || \
            wget -nv -O ${artifact_base} ${module_url}/${artifact_base}
        fi

        if [[ ${artifact_name} != ${artifact_base} ]] ; then
            ln -s ${artifact_base} ${artifact_name}
        fi

        mimetype=`file --mime ${artifact_base}`
        if echo ${mimetype} | grep -q "application/x-executable"; then
            chmod u+x ${artifact_base}
        elif echo ${mimetype} | grep -q "text/x-shellscript"; then
            chmod u+x ${artifact_base}
        fi

    done

    profile_setup_file=setup-${profile}.sh
    if [[ -f "${profile_setup_file}" ]] ; then
        echo "Running ${profile_setup_file}"
        source ${profile_setup_file}
    fi
}

if [[  $module_version == exported && -d ${REPRO_BOOTSTRAP_DIR}/exported ]] ; then
    new_exported_dir="${REPRO_BOOTSTRAP_DIR}/exported-${module_name}"
    sudo mv /${REPRO_BOOTSTRAP_DIR}/exported ${new_exported_dir}
    echo ${new_exported_dir} > ${REPRO_LAST_EXPORTED_DIR}
fi

# determine path to index entry for this module
repro_index_entry=${REPRO_INDEX_DIR}/${module_name}

# install the module if the index entry does not exist
if [[ ! -f ${repro_index_entry} ]] ; then 

    echo "Installing REPRO module ${module_name} version ${module_version}..."

    module_dir=${REPRO_MODULES_DIR}/${module_name}-${module_version}

    mkdir -p ${module_dir}
    cd ${module_dir}

    # always process the base profile
    process_manifest base

    # process optional profiles specified in the script options
    for profile in demo dev test
    do
        echo "------Looking for --${profile} option in arguments----------"
        if [[ ${arguments[*]} =~ "--$profile" ]] ; then
            echo "------Found --${profile} option in arguments----------"
            process_manifest ${profile}
        fi
    done

    echo "${module_name} ${module_version} ${module_dir}" > ${repro_index_entry}
    echo "${module_name}" >> ${REPRO_ORDER_FILE}

else
    echo "Module ${module_name} was already installed."
fi



