#!/bin/bash

arguments=( "$@" )

echo "---------ARGUMENTS=${arguments[*]}------------"

module_name=$1
module_version=$2
module_url_template=$3

module_url=`eval echo ${module_url_template}`

function set_mode_bits {
    artifact=$1
    mimetype=`file --mime ${artifact}`
    if echo ${mimetype} | grep -q "application/x-executable"; then
        chmod u+x ${artifact}
    elif echo ${mimetype} | grep -q "text/x-shellscript"; then
        chmod u+x ${artifact}
    fi
}

function install_profile {

    local profile=$1
    local module_installation_dir=$2

    mkdir -p ${module_installation_dir}
    cd ${module_installation_dir}
    echo "Now working in $(pwd)"

    profile_manifest_file="manifest-${profile}"

    echo "------Processing ${profile} profile while working in in $(pwd)----------"

     if [[ $module_version == exported ]] ; then

        if [[ -d ${REPRO_BOOTSTRAP_DIR}/exported ]] ; then
            export_snapshot_dir="${REPRO_BOOTSTRAP_DIR}/exported-${module_name}"
            sudo mv /${REPRO_BOOTSTRAP_DIR}/exported ${export_snapshot_dir}
        fi

        exported_manifest_file=${export_snapshot_dir}/${profile_manifest_file}
        if [[ -f ${exported_manifest_file} ]] ; then
            echo "------Copying local manifest file from ${exported_manifest_file} to $(pwd)------"
            cp ${export_snapshot_dir}/${profile_manifest_file} . 
        else 
            echo "------No local manifest file found at ${exported_manifest_file}------"
            return
        fi
    else
        remote_manifest_file=${module_url}/${profile_manifest_file}
        curl -L ${remote_manifest_file} -o ${profile_manifest_file} 
        if [[ $? -ne 0 ]] ; then
            echo "------No remote manifest file found at ${remote_manifest_file}------"
            return
        fi 
    fi

    echo "------Processing contents of manifest file ${profile_manifest_file}------"

    readarray lines < ${profile_manifest_file}

    for full_line in "${lines[@]}" ; do
        # trim comments starting with a `#` character on the line
        trimmed_line=${full_line%%#*}

        # split the trimmed line using whitespace as token delimiter
        read -ra tokens <<< ${trimmed_line}

        # interpret the line based on the number its tokens
        case ${#tokens[@]} in

        1)  artifact_name=${tokens[0]}
            artifact_path=${artifact_name}
        ;;

        2)  artifact_name=${tokens[0]}
            artifact_path=${tokens[1]}
        ;;

        *) continue
        ;;

        esac

        artifact_base=$(basename $artifact_path)

        if [[ ${artifact_path} == http?:* ]] ; then
            curl -L ${artifact_path} -o ${artifact_base} 
        elif [[ $module_version == exported ]] ; then
            cp ${export_snapshot_dir}/${artifact_path} ${artifact_base}
        else
            curl -L ${module_url}/${artifact_path} -o ${artifact_base}  || \
            curl -L ${module_url}/${artifact_base} -o ${artifact_base} 
        fi

        if [[ ${artifact_name} != ${artifact_base} ]] ; then
            ln -s ${artifact_base} ${artifact_name}
        fi

        set_mode_bits ${artifact_base}

    done

    profile_setup_file=setup-${profile}
    if [[ -f "${profile_setup_file}" ]] ; then
        echo "Running ${profile_setup_file}"
        source ${profile_setup_file}
    fi
}

# determine path to index entry for this module
repro_index_entry=${REPRO_INDEX_DIR}/${module_name}

# install the module if the index entry does not exist
if [[ ! -f ${repro_index_entry} ]] ; then 

    echo "Installing REPRO module ${module_name} version ${module_version}..."

    module_installation_dir=${REPRO_MODULES_DIR}/${module_name}-${module_version}

    # always process the base and state profiles
    install_profile base ${module_installation_dir}
    install_profile state ${module_installation_dir}

    # process optional profiles specified in the script options
    for profile in demo dev test ; do
        echo "------Looking for --${profile} option in arguments----------"
        if [[ ${arguments[*]} =~ "--$profile" ]] ; then
            echo "------Found --${profile} option in arguments----------"
            install_profile ${profile} ${module_installation_dir}
        fi
    done

    echo "${module_name} ${module_version} ${module_installation_dir}" > ${repro_index_entry}
    echo "${module_name}" >> ${REPRO_ORDER_FILE}

else
    echo "Module ${module_name} was already installed."
fi



